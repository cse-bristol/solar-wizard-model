diff -u ../../../build-orig/grass-8.2.0/raster/r.sun/main.c r.sun/main.c
--- ../../../build-orig/grass-8.2.0/raster/r.sun/main.c	2022-06-03 14:27:06.000000000 +0100
+++ r.sun/main.c	2022-08-23 09:10:35.667619063 +0100
@@ -1711,6 +1711,7 @@
     double locTimeOffset;
     double latitude, longitude;
     double coslat;
+    bool shouldBeBestAM, isBestAM;
 
 
     struct SunGeometryConstDay sunGeom;
@@ -1838,7 +1839,7 @@
 	}
 	sunVarGeom.zmax = zmax;
         shadowoffset_base = (j % (numRows)) * n * arrayNumInt;
-    #pragma omp parallel firstprivate(q1,tan_lam_l,z1,i,shadowoffset,longitTime,coslat,coslatsq,latitude,longitude,sin_phi_l,latid_l,sin_u,cos_u,sin_v,cos_v,lum,gridGeom,elevin,aspin,slopein,civiltime,linkein,albedo,latin,coefbh,coefdh,incidout,longin,horizon,beam_rad,insol_time,diff_rad,refl_rad,glob_rad,mapset,per,decimals,str_step)
+    #pragma omp parallel firstprivate(q1,tan_lam_l,z1,i,shadowoffset,longitTime,coslat,coslatsq,latitude,longitude,sin_phi_l,latid_l,sin_u,cos_u,sin_v,cos_v,lum,gridGeom,elevin,aspin,slopein,civiltime,linkein,albedo,latin,coefbh,coefdh,incidout,longin,horizon,beam_rad,insol_time,diff_rad,refl_rad,glob_rad,mapset,per,decimals,str_step,shouldBeBestAM,isBestAM)
     {
       #pragma omp for schedule(dynamic)                                                        \
                       firstprivate(sunGeom,sunVarGeom,sunSlopeGeom,sunRadVar)                  \
@@ -1952,8 +1953,19 @@
 
 		q1 = gridGeom.sinlat * cos_u * sin_v +
 		    gridGeom.coslat * sin_u;
-		tan_lam_l = -cos_u * cos_v / q1;
-		sunSlopeGeom.longit_l = atan(tan_lam_l);
+
+                if (q1 != 0.0) {
+                    tan_lam_l = -cos_u * cos_v / q1;
+                    sunSlopeGeom.longit_l = atan(tan_lam_l);
+                    isBestAM = (tan_lam_l > 0);
+                } else {
+                    sunSlopeGeom.longit_l = pihalf;
+                    isBestAM = true;
+                }
+
+                shouldBeBestAM = (0.0 < sunSlopeGeom.aspect && sunSlopeGeom.aspect <= M_PI);
+                sunSlopeGeom.shift12hrs = (shouldBeBestAM != isBestAM);
+
 		sunSlopeGeom.lum_C31_l = cos(latid_l) * sunGeom.cosdecl;
 		sunSlopeGeom.lum_C33_l = sin_phi_l * sunGeom.sindecl;
 
diff -u ../../../build-orig/grass-8.2.0/raster/r.sun/rsunlib.c r.sun/rsunlib.c
--- ../../../build-orig/grass-8.2.0/raster/r.sun/rsunlib.c	2022-06-03 14:27:06.000000000 +0100
+++ r.sun/rsunlib.c	2022-08-23 08:45:55.274100794 +0100
@@ -341,6 +341,10 @@
     /* func = cube; */
     sunVarGeom->isShadow = 0;
 
+    double timeOffset = 0;
+    if (sunSlopeGeom->shift12hrs)
+        timeOffset = M_PI;
+
     if (useShadow()) {
 	length = 0;
 
@@ -383,7 +387,7 @@
 		   }
 		 */
 		s = sunSlopeGeom->lum_C31_l
-			* cos(-sungeom->timeAngle - sunSlopeGeom->longit_l)
+			* cos(-sungeom->timeAngle - sunSlopeGeom->longit_l + timeOffset)
 			+ sunSlopeGeom->lum_C33_l;	/* Jenco */
 	    }
 
@@ -409,7 +413,7 @@
 		   }
 		 */
 		s = sunSlopeGeom->lum_C31_l
-			* cos(-sungeom->timeAngle - sunSlopeGeom->longit_l)
+			* cos(-sungeom->timeAngle - sunSlopeGeom->longit_l + timeOffset)
 			+ sunSlopeGeom->lum_C33_l;	/* Jenco */
 	    }
 	}
@@ -424,7 +428,7 @@
 	   }
 	 */
 	s = sunSlopeGeom->lum_C31_l
-		* cos(-sungeom->timeAngle - sunSlopeGeom->longit_l)
+		* cos(-sungeom->timeAngle - sunSlopeGeom->longit_l + timeOffset)
 		+ sunSlopeGeom->lum_C33_l;	/* Jenco */
     }
 
diff -u ../../../build-orig/grass-8.2.0/raster/r.sun/sunradstruct.h r.sun/sunradstruct.h
--- ../../../build-orig/grass-8.2.0/raster/r.sun/sunradstruct.h	2022-06-03 14:27:06.000000000 +0100
+++ r.sun/sunradstruct.h	2022-08-23 08:45:55.274100794 +0100
@@ -73,7 +73,7 @@
     double lum_C33_l;
     double slope;
     double aspect;
-
+    bool shift12hrs;
 };
 
 
Common subdirectories: ../../../build-orig/grass-8.2.0/raster/r.sun/testsuite and r.sun/testsuite
